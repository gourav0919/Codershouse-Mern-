# if you have many services then you have to create many docker files and then build image file and run it so you have to do so many things. Like in this application we have 3 services backend, database and frontend

# To solve this problem we have a tool called as the docker compose so we can do all of those configurations in one file and all of the work which previouly we are doing in split now can be done with one command

# This is the yaml file
# version 3 is the compose yaml version
# version: "3"
# 3.8 is the latest version for the yaml docker compose
version: "3.8"

# Then we have to mention the services :- frontend, backend and the database or you can say as the mongodb
services:
  # This name can be anything
  mongodb:
    # we have to give the name of the service as the image name
    image: "mongo"
    # Any name as the container name
    container_name: "mongodb-database"
    # if container close then restart automaticlly
    restart: "always"
    # This is very important
    # we are doing by using the dash so we can also provide the multiple port binding also
    ports:
      # if we did not do the port binding then we did not be able to access the docker internal port
      # now we are doing the port binding :- we are saying bing the docker internal 27017 port to the operating system 27017 port
      # now you have to remember we mentioned 2 ports.
      # first Port :- operating system port
      # second Port :- docker Internal port
      - "27017:27017"

    # when you run a container this will start the container and when you delete it the whole data get away
    # This is our database so we know that database persist data so we did not want that our data got deleted when the container go down so we use the volume option
    # so here we are doing the folder binding. first is the operating system folder and second is the container folder from where you have to take the data for persist
    volumes:
      - "C:/Users/Gourav Khurana/Documents/databases/mongodb/codershouse-data:/data/db"

  # In the mongoDb service we use the inbuilt image but in the backend image we have to build the custom image
  backend:
    build:
      # we use the docker file for the build as we know for building this service use this file
      dockerfile: Dockerfile.dev
      # giving the address where to find the above docker file
      context: ./backend/
    container_name: backend
    restart: always
    # left side is for the operating system and right side is for docker internal
    ports:
      - "5500:5500"
    env_file:
      - ./backend/.env.dev
    # when we change it then it can automaticlly bind the os backend to the docker backend
    volumes:
      - "./backend:/backend"
      # - "D:/Coding/MERN Projects/codershouse/backend:/backend"
      # This is anonymous docker will automaticlly install the node modules so we are saying that leave it
      - "/backend/node_modules"
    # some services we want to run before running the backend like the database if not then it gives us the error
    # we have to give the name which we give to the service not the container name
    depends_on:
      - mongodb

  frontend:
    build:
      dockerfile: Dockerfile.dev
      # We give the context like this because we want to get the ssl certificate and we can do this as we do in the backend service no problem
      # context says that we have to go to that folder and then start executing that docker file directly from that folder
      context: ./
    container_name: frontend
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env.dev
    volumes:
      # This solves the problem of restarting the container and rebuiding the image file which is a long process
      # Trying relative paths
      - "./frontend:/frontend"
      # - "D:/Coding/MERN Projects/codershouse/frontend:/frontend"
      # do not touch the node modules
      - /frontend/node_modules
    environment:
      # This is required for the react
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
# volumes:
# We are going to use different docker files for the development and production
